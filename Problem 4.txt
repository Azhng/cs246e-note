Problem:
  What if we forget to call `make_vector`?
    - we will have an uninittialized object 

  What if we forget to call dispose? 
    - we will have a memory leak 

  How can we make this more robust? 


Introduction to Classes:
  First concept in OOP - putting functions in a struct 
  <!-- C++ !-->
  struct Student {
    int assns, mt, final;
    float grade() {
      return assns * 0.4 + mt * 0.2 + final * 0.4;
    }
  };

  struct that can contain functions will become `classes`

  functions inside structs are called `methods` 

  instances of a class are called `objects` 

  E.g.
    `Student bob {90, 70, 80};`
     ^~~~~~  ^~~
     class   object
    `cout << bob.grade();`
                 ^~~~~~
                 method 

  Question: 
    what do `assns`, `mt`, `final` mean within `grade()` ?
    or more concretly, what is the difference between methods and functions 
    
    `fields` of the current object - the receiver of the method call, e.g. bob 

    Formally, methods differ from functions in that methods have an implicit parameter called `this` that 
    is a pointer to the receiver object. 

    `bob.grade()` 
              ^~~
              `this` is the address of bob 

    therefore we could also write:
    <!-- C++ !-->
    struct Student { 
      ... 
      float grade() {
        return this->assns * 0.4 + this->mt * 0.2 + this->final * 0.4;
      }
    }


Initializing objects: 
  <!-- C++ !-->
  `Student bob {90, 80, 80};`  C-style initialization 
                               field-by-field 
                               but quite limited 
  

  It would be better if the initialization method is also a constructor
  <!-- C++ !-->
  struct Student {
    int assns, mt, final;
    Student(int assns, int mt, int final) {
      this->assns = assns;
      this->mt = mt;
      this->final = final; 
    }
  };


  int main() {
    Student bob {90, 70, 80}; // new initialization syntax O.o
                              // it looks the same, but it is actually calling
                              //  the constructor function with those arguments
  }


  Note: once a constructor is defined, C-style field-by-field initialization is no longer 
  available 

  Equivlent: 
    `Student bob = Student {90, 70, 80};`

  Heap 
    `Student *p = new Student {90, 70, 80};`
    `delete p;`

  Advantages of ctors: 
    - default parameters
    - overloading 
    - sanity checks
    - field-by-field is no longer available

  E.g.
    <!-- C++ !-->
    struct Student { 
      // ... 
      Student(int assns = 0, int mt = 0, int final = 0) {
        // ...
      } 
    };

    Student laura {70}; // means 70, 0, 0
    Student newkid; // means 0, 0, 0


Note: 
  every class comes with a built-in default constructor - zero argument constructor

  E.g.
    `Node n;` we were actually calling a default constructor. 
    Default constructor default-constructs all fields that are objects 
      - does nothing in this case 
      - goes away if you write any constructor 
      E.g.  
        <!-- C++ !-->
        struct Node {
          int data; 
          Node *next; 
          Node(int data, Node *next = null) {
            // ... 
          }
        }

        Node n(3); // valid 
        Node n; // no longer compile 
                // since we have defined our own constructor



Object creation protocal:
  - when an object is created, there are 4 steps 
    1. space is allocated
    2. (later)
    3. fields are constructed in declaration order (field constructors called for fields that are objects)
    4. the constructor body runs 


  based on this protocal, field initialization should happen in step 3, but constructor body is step 4
  as a consequence: object fields initialized twice 

    <!-- C++ !-->
    #include <string> 
    using std::string;

    struct Student {
      int assns, mt, final; 
      string name; 
      Student(string name, int assns, int mt, int final) {
        this->name = name; 
        // ... 
        // ... 
      }
    };

    int main (){ 
      Student mike("Mike", 90, 70, 60);
    }

    Note here that `name` is defualt-initialized in step 3 as default string 
    then reassigned in step 4 as "Mike"

    To fix the Member initialization List (MIL)
      <!-- C++ !-->
      struct Student {
        Student(string name, int assns, int mt, int final) : 
          name(name), assns(assns), mt(mt), final(final) {}
                                                      // ^~
                                                      // step 4 
      };

      Now name is initialized once rather than twice 

    MIL must be used for fields that are 
      - constatns 
      - references 
      - objects without a default constructor 
      - should be used as much as possible

    careful: single-argument constructor create implicite conversions 
      <!-- C++ !-->
      struct Node { 
        Node (int data, Node *next = ptr) : ~~~ {}
      }


      Node n(4); // ok 
      Node n = 4; // ok too 
           ^~~~~~
           implicit conversion from `int` to `Node`

      void f(Node n);
      f(4); // Ok - but maybe a bit trouble 


    the proper solution to enforce two parameter ctor:
      `explicit Node(int data, Node *next = nullptr): ____ {}`

    If we use `explicit` keyword:
      `Node n(4);` is ok 
      `Node n = 4;` is not ok

      `f(4);` is not ok 
      `f(Node(4));` is ok

    The only time it makes sense is when we do `string s = "hello";`


Object Destruction:
  - a method called the destructor (dtor) runs automatically 
  - built-in dtor 
  - call dtors on all fields that are objects 
    Object destruction protocal: 4 steps 
      1) dtor body runs 
      2) fields destructed (dtors called on fields that are objects)
         in reverse declaration order 
      3) (later)
      4) space deallocated 

    E.g.  
      <!-- C++! !-->
      struct Node {
        int data; 
        Node *next;
      };


      the default (built-in) destructor here does not do anything 
      since `int` and pointer are not objects therefore they do not have dtor 

      <!-- C++ !-->
      Node *n = new Node(3, new Node(4, new Node (5, nullptr)));
      delete n; // this is a memory leak since the rest of the linked list remains in the memory 

    We can write our own dtor 
      <!-- C++ !-->
      struct Node { 
        // ... 
        ~Node() {
          delete next; // if next is nullptr it is perfectly fine 
        }
      }

      delete n; // this now frees whole list 

    Also 
      <!-- C++ !-->
      {
          Node n(1, new Node(2, new Node(3, nullptr))));
       //      ^         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
      //stack alocated    heap allocated 
      }
      ^~~~
      scope of `n` ends, whole list is freed 

  Object: 
    - a ctor always runs when they are created 
    - a dtor always runs when they are destroyed

  Back to the vector example - turn into class 
    <!-- C++ !-->
    // vector.h
    #ifndef VECTOR_H
    #define VECTOR_H

    namespace CS246E {
      struct Vector {
        size_t n, cap;
        int *theVector;
        Vector();
        size_t size();
        int& itemAt(size_t i);
        void push_back(int n);
        void pop_back();
        ~Vector();
      }
    }

    #endif 


    // vector.cc 
    #include "vector.h"
    namespace {
      void increaseCap(Vector &v) {/* unchanged */}
    }

    const size_t startSize = 1;

    CS246E::Vector::Vector() : size{0}, cap{startSize}, theVecotr{new int[cap]} { }

    size_t CS246E::Vector::size() { return n; }

    CS246E::Vector::~Vector() {
      delete[] theVecotr;
    }

    // the rest is left as exercise

    // main.cc
    int main() {
      Vector v;
      v.push_back(1);
      v.push_back(10);
      v.push_back(100);
      v.itemAt(0) = 2;
    }// we do not need to call dispose, dtor cleans up everything






















